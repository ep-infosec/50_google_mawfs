# Copyright 2016 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Contains the "Chunkers" - chunkers are just Writers that break up large
## buffers into a set of smaller buffers.

import crack.lang AppendBuffer, Buffer, ManagedBuffer;
import crack.cont.array Array;
import crack.io cout, Reader, StringReader, Writer;
import crack.logger debug, setLogLevel, DEBUG;
import crack.strutil StringArray;

@import crack.ann impl;

# A prime constant that's around 8K.
const q := 7919;

## The multiplicative inverse of 256 mod q.
const MI := 7455;

## Default size of the fingerprinting window.
const DEFAULT_WINDOW_SIZE := 32;

class RabinFingerprinter {

    # This is a ring-buffer that contains the window that we're hashing.
    # 'pos' is the index of the oldest byte in the ring-buffer.
    ManagedBuffer data = {DEFAULT_WINDOW_SIZE};
    int pos;

    # This is the accumulator containing the Rabin fingerprint of the window
    # mod q.
    uint accum;

    ## Clear the data buffer and reset the position to zero.
    void reset() {
        for (int i; i < data.size; ++i)
            data.buffer[i] = 0;
        pos = 0;
    }

    oper init() {
        # Clear the history ring.
        data.size = data.cap;
        reset();
    }

    ## Calculate the oldest term of the polynomial from the byte.
    uint calcOldest(byte b) {
        uint oldest = b;
        for (int i = 0; i < data.size - 1; ++i)
            oldest = (oldest << 8) % q;
        return oldest;
    }

    ## Adds a single byte to the window and returns true if the fingerprint
    ## matches.
    @final bool add(byte b) {
        # Subtract the oldest*256^size
        uint oldest = calcOldest(data.buffer[pos]);
        accum = (((accum - oldest) << 8) + b) % q;

        # Store the byte in the ring bufer.
        data.buffer[pos++] = b;
        if (pos >= data.size)
            pos = 0;

        return accum == 0;
    }

    ## Add a complete buffer full of data through the window.  Returns the
    ## index of the end of the chunk if a chunk boundary is discovered,
    ## otherwise returns -1.
    @final intz add(Buffer data) {
        intz i;
        for (i = 0; i < data.size; ++i) {
            if (add(data.buffer[i]))
                return i + 1;
        }
        return -1;
    }

    ## Return the size of the fingerprinting window in bytes.
    @final uint getWindowSize() {
        return data.size;
    }

    void shiftBack(byte b) {
        if (pos == 0)
            pos = data.size;
        --pos;

        newest := data.buffer[pos];

        # Subtract the newest and divide by 256.  We divide by 256 using the
        # multiplicative inverse of 256 mod q.
        accum = ((accum - newest) * MI) % q;

        # Add back the oldest.
        accum = (accum + calcOldest(b)) % q;
    }
}

const MAX_CHUNK_SIZE := 16384;
const MIN_CHUNK_SIZE := 2048;

## Finds the next chunk of data that is written to it and writes it in a
## single write to the underlying writer.
class RabinChunker @impl Writer {

    Writer __rep;
    AppendBuffer __buffer = {8192};
    RabinFingerprinter __fp = {};

    oper init(Writer rep) : __rep = rep {}

    void __writeChunk(uintz chunkSize) {
        __rep.write(Buffer(__buffer.buffer, chunkSize));
        __buffer.compact(chunkSize);
        __fp.reset();
    }

    void write(Buffer data) {
        orgSize := __buffer.size;
        String snippet(Buffer content) {
            if (content.size > 16)
                return content.getRepr().slice(0, 16);
            else
                return content.getRepr();
        }
        __buffer.extend(data);

        # This will keep track of the remaining data as we extract chunks.
        remaining := Buffer(data.buffer, data.size);

        # Loop through the contents of the buffer until we can't create any
        # more chunks.
        while (remaining) {
            s := __fp.add(remaining);
            if (s >= 0) {
                # We found the fingerprint.

                # If the new chunk is greater than the minimum chunk size,
                # cut it off here.
                if (orgSize + s >= MIN_CHUNK_SIZE) {
                    __writeChunk(orgSize + s);
                    orgSize = 0;
                } else {
                    # Reset the orgSize: we're now based off the last
                    # fingerprint.
                    orgSize = orgSize + s;
                }
                remaining.buffer += s;
                remaining.size -= s;
            } else if (__buffer.size >= MAX_CHUNK_SIZE) {
                # If we're bigger than the max size, cut it off at the chunk
                # size.
                __writeChunk(MAX_CHUNK_SIZE);
                remaining.buffer += MAX_CHUNK_SIZE - orgSize;
                remaining.size -= MAX_CHUNK_SIZE - orgSize;
                orgSize = 0;
            } else {
                # No more chunks in this buffer.
                break;
            }
        }
    }

    @final void writeZeros(uintz count) {
        write(String(uintz(count), 0));
    }

    @final uint getWindowSize() {
        return __fp.getWindowSize();
    }

    void flush() {
        if (__buffer)
            __writeChunk(__buffer.size);
    }

    oper del() {
        flush();
    }
}
