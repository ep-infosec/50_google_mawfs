## Refactor of Doubly-linked list code to allow for intrusive lists.

import crack.io cerr, Formatter;
import crack.lang cmp, AssertionError, IndexError, InvalidArgumentError;

@import crack.ann assert;

## Doubly-linked list.  'Node' must be derived from DLNode.
## 'Node' must contain 'next' and 'prev' instance variables, both of the same
## type as the node.  It must also contain a constructor that accepts the node
## type which will be assigned to 'prev'.
class DLList[Node] {

    class Iter {
        Node _node;
        oper init(Node node) : _node = node {}

        @final Node elem() { return _node }

        @final bool next() {
            if (!_node)
                return false;

            _node = _node.next;
            return _node;
        }

        @final bool isTrue() { return _node }

        ## The opposite of next(): Back-up the iterator to the last node,
        ## return true if it's valid.
        @final bool prev() {
            _node = _node.prev;
            return _node;
        }
    }

    Node head, tail;
    uint _count;

    oper init() {}

    ## Break the reference cycles between nodes.
    void __breakRefCycles() {
        node := head;
        while (node) {
            node.prev = null;
            node = node.next;
        }
    }

    oper del() {
        __breakRefCycles();
    }

    ## Insert the node at the iterator (after insertion, the iterator will
    ## reference the new node, the old node that iterator previously
    ## referenced will be the next node)
    @final void insert(Iter ix, Node node) {

        # get what will be the next and previous node of the new node.
        next := ix._node;
        prev := next.prev;
        node.prev = prev;
        node.next = next;

        if (prev)
            prev.next = node;
        else
            head = node;

        if (next)
            next.prev = node;
        else
            tail = node;

        ix._node = node;
        ++_count;
    }

    ## Delete the object at the iterator.  After deletion, the iterator
    ## will refer to what was originally the subsequent node.
    @final void delete(Iter ix) {
        node := Node.unsafeCast(ix._node);
        if (node.next)
            node.next.prev = node.prev;
        else
            tail = node.prev;

        if (node.prev)
            node.prev.next = node.next;
        else
            head = node.next;

        --_count;
        ix._node = node.next;
    }

    ## Delete all elements from the list.
    @final void clear() {
        __breakRefCycles();
        head = tail = null;
        _count = 0;
    }

    ## Returns an iterator for the list.
    @final Iter iter() {
        return Iter(head);
    }

    ## Returns an iterator.
    ## if 'back' is true, initialize it to point to the last node on the
    ## list. Otherwise point it to the first node.
    @final Iter iter(bool back) {
        if (back)
            return Iter(tail);
        else
            return Iter(head);
    }

    ## Appends a new node to the end of the list.
    @final void append(Node node) {
        node.next = null;
        if (tail) {
            node.prev = tail;
            tail.next = node;
            tail = node;
        } else {
            head = tail = node;
            node.prev = null;
        }
        _count = _count + 1;
    }

    ## Insert a new element at the beginning of the list.
    @final void pushHead(Node node) {
        node.prev = null;
        if (head) {
            node.next = head;
            head.prev = node;
            head = node;
        } else {
            head = tail = node;
        }
        _count = _count + 1;
    }

    alias pushTail = append;

    @final Node popHead() {
        node := head;
        if (!head)
            throw InvalidArgumentError('Attempting to pop from an empty list');
        if (head == tail)
            head = tail = null;
        else
            head = head.next;
        if (head)
            head.prev = null;
        --_count;
        node.next = node.prev = null;
        return node;
    }

    ## Remove the element from the back of the list and return it.
    @final Node popTail() {
        if (!tail)
            throw InvalidArgumentError('Attempting to pop from an empty list');
        node := tail;
        if (tail == head)
            tail = head = null;
        else
            tail = node.prev;
        if (tail)
            tail.next = null;
        else
            head = null;
        node.next = node.prev = null;
        --_count;
        return node;
    }

    alias pop = popTail;

    @final Node __findNode(uint index) {
        i := index;
        node := head;
        while (i && node) {
            node = node.next;
            i = i - 1;
        }
        if (!node) throw AssertionError('List is shorter than its count.');
        return node;
    }

    ## Insert a new element at the specified index.
    @final void insert(uint index, Node node) {
        # special-case inserting at the beginning
        if (!index) {
            pushHead(node);
            return;
        }

        # find the node that's going to be before the new node
        cur := __findNode(index - 1);

        # create a new node and append it to the node we found
        node.next = cur.next;
        if (cur.next)
            cur.next.prev = node;
        cur.next = node;

        # see if we need to fix the tail
        if (cur is tail)
            tail = node;
        _count = _count + 1;
    }

    ## Delete the element at the specified index.
    @final void delete(uint index) {
        if (index > _count)
            throw IndexError('List index out of range in delete()');
        if (index > 0) {
            # find the node before it.
            node := __findNode(index - 1);

            # if the next node is the tail, reset the tail.
            if (node.next is tail)
                tail = node;

            # drop the current next node.
            tmp := node.next.next;
            node.next = tmp;
            if (tmp)
                tmp.prev = node;
        } else {
            # first node is special and easy
            tmp := head.next;
            if (head is tail)
                tail = tmp;
            head = tmp;
            if (tmp)
                tmp.prev = null;
        }

        _count = _count - 1;
    }

    ## Removes the first matching node (by equality) from the list.
    ## Returns true if the element was deleted, false if not found.
    @final bool removeEqual(Node node) {
        cur := head;
        while (cur) {
            if (cur == node) {
                next := cur.next;
                if (cur.prev)
                    cur.prev.next = next;
                if (next)
                    next.prev = cur.prev;
                if (cur is head)
                    head = cur.next;
                if (cur is tail)
                    cur = node.prev;
                --_count;
                return true;
            }
            cur = cur.next;
        }
        return false;
    }

    ## Remove the node from the list.
    ## Note that this does not ensure that the node is actually _in_ the list,
    ## so it's possible that this can remove the node from whichever list it
    ## happens to be in.  We do at least assert that, it it's the head or tail
    ## node, it is this list's head or tail node.
    ## Throws InvalidArgumentError if this is not the case.
    @final void remove(Node node) {
        if (!node.prev) {
            if (!(head is node))
                throw InvalidArgumentError('Node is not in the list');
            @assert(head is node);
            head = node.next;
            head.prev = null;
        }
        if (!node.next) {
            if (!(tail is node))
                throw InvalidArgumentError('Node is not in the list');
            tail = node.prev;
            tail.next = null;
        } else {
            node.next.prev = node.prev;
            if (node.prev)
                node.prev.next = node.next;
        }
        node.next = node.prev = null;
        rc := node.refCount;
        _count--;
    }

    ## Returns the node at the specified index.
    @final Node oper [](uint index) {
        if (index > _count)
            throw IndexError('List index out of range in []');
        node := __findNode(index);
        return node;
    }

    ## Returns the number of elements in the list.
    @final uint count() { return _count; }

    ## Empty lists are false, non-empty lists are true.
    bool isTrue() { return !head ? false : _count; }

    int cmp(DLList other) {
        Node a = head, b = other.head;
        while (a || b) {
            if (a && !b) {
                return 1;
            } else if (!a && b) {
                return -1;
            } else {
                diff := cmp(a, b);
                if (diff)
                    return diff;
            }
            a = a.next;
            b = b.next;
        }
        return 0;
    }

    int cmp(Object other) {
        if (o := DLList.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }

    void formatTo(Formatter fmt) {
        fmt `[`;
        bool first = true;
        for (elem :in this) {
            if (!first)
                fmt `, `;
            else
                first = false;
            if (elem is null) fmt `null`;
            else {
                fmt `$elem`;
            }
        }
        fmt `]`;
    }
}
